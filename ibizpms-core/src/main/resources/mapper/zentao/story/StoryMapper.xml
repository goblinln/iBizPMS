<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper	namespace="cn.ibizlab.pms.core.zentao.mapper.StoryMapper">

    <!--该方法用于重写mybatis中selectById方法，以实现查询逻辑属性-->
	<select id="selectById"  resultMap="StoryResultMap" databaseId="mysql">
        <![CDATA[select t1.* from (SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  ) t1 where id=#{id}]]>
    </select>

    <!--通过mybatis将查询结果注入到entity中,通过配置autoMapping="true"由mybatis自动处理映射关系 -->
    <resultMap id="StoryResultMap" type="cn.ibizlab.pms.core.zentao.domain.Story" autoMapping="true">
        <id property="id" column="id" /><!--主键字段映射-->
		<result property="productname" column="prodoctname" />
		<result property="frombug" column="frombug" />
		<result property="parent" column="parent" />
		<result property="module" column="module" />
		<result property="product" column="product" />
		<result property="duplicatestory" column="duplicatestory" />
		<result property="branch" column="branch" />
		<result property="tobug" column="tobug" />
            
		
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ibzproductmodule" javaType="cn.ibizlab.pms.core.ibiz.domain.ProductModule" column="module" select="cn.ibizlab.pms.core.ibiz.mapper.ProductModuleMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztbranch" javaType="cn.ibizlab.pms.core.zentao.domain.Branch" column="branch" select="cn.ibizlab.pms.core.zentao.mapper.BranchMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztfrombug" javaType="cn.ibizlab.pms.core.zentao.domain.Bug" column="frombug" select="cn.ibizlab.pms.core.zentao.mapper.BugMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="zttobug" javaType="cn.ibizlab.pms.core.zentao.domain.Bug" column="tobug" select="cn.ibizlab.pms.core.zentao.mapper.BugMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztproduct" javaType="cn.ibizlab.pms.core.zentao.domain.Product" column="product" select="cn.ibizlab.pms.core.zentao.mapper.ProductMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztstoryduplicatestory" javaType="cn.ibizlab.pms.core.zentao.domain.Story" column="duplicatestory" select="cn.ibizlab.pms.core.zentao.mapper.StoryMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztparent" javaType="cn.ibizlab.pms.core.zentao.domain.Story" column="parent" select="cn.ibizlab.pms.core.zentao.mapper.StoryMapper.selectById" fetchType="lazy"></association>
    </resultMap>

	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_IBZ_PRODUCTMODULE_MODULE] -->
	 <select id="selectByModule" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  module=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_ZT_BRANCH_BRANCH] -->
	 <select id="selectByBranch" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  branch=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_ZT_BUG_FROMBUGID] -->
	 <select id="selectByFrombug" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  frombug=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_ZT_BUG_TOBUGID] -->
	 <select id="selectByTobug" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  tobug=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_ZT_PRODUCT_PRODUCT] -->
	 <select id="selectByProduct" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  product=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_STORY_ZT_STORY_DUPLICATESTORY] -->
	 <select id="selectByDuplicatestory" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  duplicatestory=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N__ZT_STORY__ZT_STORY__PARENT] -->
	 <select id="selectByParent" resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         ) t1
         where  parent=#{id}
     </select>

    <!--数据集合[BuildLinkCompletedStories]-->
	 <select id="searchBuildLinkCompletedStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="BuildLinkCompletedStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[BuildLinkableStories]-->
	 <select id="searchBuildLinkableStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="BuildLinkableStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[BuildStories]-->
	 <select id="searchBuildStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="BuildStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[ByModule]-->
	 <select id="searchByModule"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="ByModule" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[Default]-->
	 <select id="searchDefault"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="Default" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[GetProductStories]-->
	 <select id="searchGetProductStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="GetProductStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[ProjectStories]-->
	 <select id="searchProjectStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="ProjectStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[ReleaseStories]-->
	 <select id="searchReleaseStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="ReleaseStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[ReportStories]-->
	 <select id="searchReportStories"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="ReportStories" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[StoryChild]-->
	 <select id="searchStoryChild"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="StoryChild" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[StoryRelated]-->
	 <select id="searchStoryRelated"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="StoryRelated" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[TaskRelatedStory]-->
	 <select id="searchTaskRelatedStory"  parameterType="cn.ibizlab.pms.core.zentao.filter.StorySearchContext"  resultMap="StoryResultMap">
         select t1.* from (
                <include refid="TaskRelatedStory" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据查询[BuildLinkCompletedStories]-->
    <sql id="BuildLinkCompletedStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID   WHERE  t1.DELETED = '0'  AND 	t1.id IN ( SELECT tt.story FROM zt_projectstory tt WHERE tt.project = #{srf.datacontext.project} )  	AND t1.product = ( SELECT t2.product FROM zt_build t2 WHERE t2.id = #{srf.datacontext.build} ) 	and t1.id not in (select t3.id from zt_story t3, zt_build t4 where t4.id = #{srf.datacontext.build} and FIND_IN_SET(t3.id,t4.stories))  
			]]>
    </sql>
    <!--数据查询[BuildLinkableStories]-->
    <sql id="BuildLinkableStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  
					 WHERE 	t1.`product` in ( select t2.`product` from zt_projectproduct t2 where t2.project = #{srf.datacontext.project}  )
						 AND t1.`STATUS` = 'active'
						 AND t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[BuildStories]-->
    <sql id="BuildStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  WHERE t1.`DELETED` = '0' AND FIND_IN_SET ( t1.ID, (SELECT STORIES FROM ZT_BUILD WHERE ID = #{srf.datacontext.srfparentkey}))
			]]>
    </sql>
    <!--数据查询[ByModule]-->
    <sql id="ByModule" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  
					 WHERE 	t1.DELETED = '0'
						 AND FIND_IN_SET (#{srf.datacontext.srfparentkey}, t11.`PATH`)
			]]>
    </sql>
    <!--数据查询[Default]-->
    <sql id="Default" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[GetProductStories]-->
    <sql id="GetProductStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID   ]]>
					 WHERE 	t1.DELETED = '0'
						 AND ( t1.`PRODUCT` = #{srf.datacontext.product}  AND  <choose><when test="srf.datacontext.branch != null"> <![CDATA[ t1.`BRANCH` =   #{srf.datacontext.branch}  ]]> </when><otherwise>1=1</otherwise></choose>  AND  <choose><when test="srf.datacontext.nodeid != null"> <![CDATA[ t1.`MODULE` =   #{srf.datacontext.nodeid}  ]]> </when><otherwise>1=1</otherwise></choose> )
    </sql>
    <!--数据查询[ProjectStories]-->
    <sql id="ProjectStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  
					 WHERE 	EXISTS(SELECT * FROM zt_projectstory t51   WHERE   t1.ID = t51.STORY  AND  ( t51.`PROJECT` = #{srf.datacontext.srfparentkey} ) )
						 AND t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[ReleaseStories]-->
    <sql id="ReleaseStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  WHERE t1.`DELETED` = '0' AND FIND_IN_SET ( t1.ID, (SELECT STORIES FROM ZT_RELEASE WHERE ID = #{srf.datacontext.srfparentkey}))
			]]>
    </sql>
    <!--数据查询[ReportStories]-->
    <sql id="ReportStories" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  WHERE t1.`DELETED` = '0' AND FIND_IN_SET ( t1.ID, (SELECT STORIES FROM ZT_TESTREPORT WHERE ID= #{srf.datacontext.srfparentkey}))
			]]>
    </sql>
    <!--数据查询[StoryChild]-->
    <sql id="StoryChild" databaseId="mysql">
		<![CDATA[  SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1 LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID WHERE  FIND_IN_SET ( t1.ID, (select tt.childStories from zt_story tt where tt.id = #{srf.datacontext.srfparentkey}))
			]]>
    </sql>
    <!--数据查询[StoryRelated]-->
    <sql id="StoryRelated" databaseId="mysql">
		<![CDATA[  SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, (select spec from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `SPEC`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, (select verify from zt_storyspec where story = t1.`ID` and version= t1.`VERSION`) AS `VERIFY`, t1.`VERSION` FROM `zt_story` t1 LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID WHERE  FIND_IN_SET ( t1.ID, (select tt.linkStories from zt_story tt where tt.id = #{srf.datacontext.srfparentkey}))
			]]>
    </sql>
    <!--数据查询[TaskRelatedStory]-->
    <sql id="TaskRelatedStory" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  
					 WHERE 	t1.DELETED = '0'
						 AND t1.`product` in (select tt.`product` from zt_projectproduct tt where tt.`project` = #{srf.datacontext.project})
			]]>
    </sql>
    <!--数据查询[View]-->
    <sql id="View" databaseId="mysql">
		<![CDATA[ SELECT t1.`ASSIGNEDDATE`, t1.`ASSIGNEDTO`, t1.`BRANCH`, t41.`NAME` AS `BRANCHNAME`, t1.`CHILDSTORIES`, t1.`CLOSEDBY`, t1.`CLOSEDDATE`, t1.`CLOSEDREASON`, t1.`COLOR`, t1.`DELETED`, t1.`DUPLICATESTORY`, t1.`ESTIMATE`, t1.`FROMBUG`, t1.`ID`, (CASE WHEN EXISTS (SELECT 1 FROM ZT_STORY WHERE  PARENT = t1.`ID` AND DELETED = '0') THEN FALSE ELSE TRUE  END ) AS `ISLEAF`, t1.`KEYWORDS`, t1.`LASTEDITEDBY`, t1.`LASTEDITEDDATE`, t1.`LINKSTORIES`, t1.`MAILTO`, t1.`MODULE`, t11.`NAME` AS `MODULENAME`, t1.`OPENEDBY`, t1.`OPENEDDATE`, t1.`PARENT`, t21.`TITLE` AS `PARENTNAME`, t11.`PATH`, t1.`PLAN`, t1.`PRI`, t31.`NAME` AS `PRODOCTNAME`, t1.`PRODUCT`, t1.`REVIEWEDBY`, t1.`REVIEWEDDATE`, t1.`SOURCE`, t1.`SOURCENOTE`, t1.`STAGE`, t1.`STAGEDBY`, t1.`STATUS`, t1.`SUBSTATUS`, t1.`TITLE`, t1.`TOBUG`, t1.`TYPE`, t1.`VERSION`, t1.`VERSION` AS `VERSIONC` FROM `zt_story` t1  LEFT JOIN zt_module t11 ON t1.MODULE = t11.ID  LEFT JOIN zt_story t21 ON t1.PARENT = t21.ID  LEFT JOIN zt_product t31 ON t1.PRODUCT = t31.ID  LEFT JOIN zt_branch t41 ON t1.BRANCH = t41.ID  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
</mapper>

